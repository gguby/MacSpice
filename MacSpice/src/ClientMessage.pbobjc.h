// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientMessage.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
#define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
#import <Protobuf/GPBProtocolBuffers.h>
#else
#import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class LogMessage;
@class ResourceMessage;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum LogMessage_EventType

/** 이벤트 대상 목록. */
typedef GPB_ENUM(LogMessage_EventType){
    /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
    LogMessage_EventType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
    LogMessage_EventType_EventNull = 0,
    LogMessage_EventType_Activated = 1,
    LogMessage_EventType_Inactivated = 2,
    LogMessage_EventType_ActionStarted = 3,
    LogMessage_EventType_ActionDone = 4,
    LogMessage_EventType_SystemStart = 5,
    LogMessage_EventType_SystemStop = 6,
    LogMessage_EventType_FuncCalled = 7,
    LogMessage_EventType_FuncExit = 8,
    LogMessage_EventType_DetectThreat = 9,
    LogMessage_EventType_PolicyViolation = 10,
    LogMessage_EventType_OperationRestrict = 11,
    LogMessage_EventType_MemoryFull = 12,
    LogMessage_EventType_DiskFull = 13,
    LogMessage_EventType_ConnectionError = 14,
    LogMessage_EventType_ValueChanged = 15,
    LogMessage_EventType_DeviceRooting = 16,
    LogMessage_EventType_UnexpectedSystemHalt = 17,
    LogMessage_EventType_UnknownError = 18,
    LogMessage_EventType_BlacklistDetection = 19,
};

GPBEnumDescriptor *LogMessage_EventType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL LogMessage_EventType_IsValidValue(int32_t value);

#pragma mark - Enum LogMessage_Event

/** 이벤트 타입 목록. 예시 */
typedef GPB_ENUM(LogMessage_Event){
    /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
    LogMessage_Event_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
    LogMessage_Event_EventTypeNull = 0,
    LogMessage_Event_Ui = 1,
    LogMessage_Event_InputKeyboard = 2,
    LogMessage_Event_InputMouse = 3,
    LogMessage_Event_MultiMonitor = 4,
    LogMessage_Event_DisplayResolution = 5,
    LogMessage_Event_ShareFolder = 6,
    LogMessage_Event_ShareDragdrop = 7,
    LogMessage_Event_ShareClipboard = 8,
    LogMessage_Event_SharePrinter = 9,
    LogMessage_Event_UsbRedirection = 10,
    LogMessage_Event_UsbFilter = 11,
    LogMessage_Event_URLRedirection = 12,
    LogMessage_Event_SecureScreen = 13,
    LogMessage_Event_SecureKeylogging = 14,
    LogMessage_Event_SecureFiletampering = 15,
    LogMessage_Event_SwUpgrade = 16,
    LogMessage_Event_H264 = 17,
    LogMessage_Event_Policy = 18,
    LogMessage_Event_LogReport = 19,
    LogMessage_Event_Auth = 20,
    LogMessage_Event_System = 21,
    LogMessage_Event_Connection = 22,
    LogMessage_Event_Blacklist = 23,
};

GPBEnumDescriptor *LogMessage_Event_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL LogMessage_Event_IsValidValue(int32_t value);

#pragma mark - Enum LogMessage_Level

/** 로그 레벨 */
typedef GPB_ENUM(LogMessage_Level){
    /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
    LogMessage_Level_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
    LogMessage_Level_LevelNull = 0,
    LogMessage_Level_Debug = 1,
    LogMessage_Level_Info = 2,
    LogMessage_Level_Warn = 3,
    LogMessage_Level_Error = 4,
    LogMessage_Level_Fatal = 5,
};

GPBEnumDescriptor *LogMessage_Level_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL LogMessage_Level_IsValidValue(int32_t value);

#pragma mark - ClientMessageRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ClientMessageRoot : GPBRootObject
@end

#pragma mark - ClientMessage

typedef GPB_ENUM(ClientMessage_FieldNumber){
    ClientMessage_FieldNumber_SndTimestamp = 1,
    ClientMessage_FieldNumber_VdiKey = 2,
    ClientMessage_FieldNumber_LogMessageArray = 3,
    ClientMessage_FieldNumber_ResourceMessageArray = 4,
};

/**
 * 전송 메시지 포맷
 **/
@interface ClientMessage : GPBMessage

/**
 * 송신 시간
 * System.currentTimeMillis(); 1529905256134;
 **/
@property(nonatomic, readwrite) int64_t sndTimestamp;

/** VM 식별 키 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *vdiKey;

/** 로그 목록 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LogMessage *> *logMessageArray;
/** The number of items in @c logMessageArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger logMessageArray_Count;

/** 리소스 목록 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ResourceMessage *> *resourceMessageArray;
/** The number of items in @c resourceMessageArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger resourceMessageArray_Count;

@end

#pragma mark - LogMessage

typedef GPB_ENUM(LogMessage_FieldNumber){
    LogMessage_FieldNumber_CrtTimestamp = 1,
    LogMessage_FieldNumber_Event = 2,
    LogMessage_FieldNumber_EventType = 3,
    LogMessage_FieldNumber_Level = 4,
    LogMessage_FieldNumber_HostOs = 5,
    LogMessage_FieldNumber_ClientVersion = 6,
    LogMessage_FieldNumber_Uuid = 7,
    LogMessage_FieldNumber_Etc = 8,
};

/**
 * 클라이언트 로그
 **/
@interface LogMessage : GPBMessage

/** 생성 시간 */
@property(nonatomic, readwrite) int64_t crtTimestamp;

/** 이벤트 대상 */
@property(nonatomic, readwrite) LogMessage_Event event;

/** 이벤트 타입 */
@property(nonatomic, readwrite) LogMessage_EventType eventType;

/** 로그 레벨 */
@property(nonatomic, readwrite) LogMessage_Level level;

/** 클라이언트 HOST OS명 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *hostOs;

/** 클라이언트 버전 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *clientVersion;

/** 클라이언트 uuid */
@property(nonatomic, readwrite, copy, null_resettable) NSString *uuid;

/** blacklist program name(text) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *etc;

@end

/**
 * Fetches the raw value of a @c LogMessage's @c event property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t LogMessage_Event_RawValue(LogMessage *message);
/**
 * Sets the raw value of an @c LogMessage's @c event property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetLogMessage_Event_RawValue(LogMessage *message, int32_t value);

/**
 * Fetches the raw value of a @c LogMessage's @c eventType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t LogMessage_EventType_RawValue(LogMessage *message);
/**
 * Sets the raw value of an @c LogMessage's @c eventType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetLogMessage_EventType_RawValue(LogMessage *message, int32_t value);

/**
 * Fetches the raw value of a @c LogMessage's @c level property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t LogMessage_Level_RawValue(LogMessage *message);
/**
 * Sets the raw value of an @c LogMessage's @c level property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetLogMessage_Level_RawValue(LogMessage *message, int32_t value);

#pragma mark - ResourceMessage

typedef GPB_ENUM(ResourceMessage_FieldNumber){
    ResourceMessage_FieldNumber_CrtTimestamp = 1,
    ResourceMessage_FieldNumber_HostOs = 2,
    ResourceMessage_FieldNumber_HostOsVersion = 3,
    ResourceMessage_FieldNumber_ClientVersion = 4,
    ResourceMessage_FieldNumber_CpuUsage = 5,
    ResourceMessage_FieldNumber_CpuType = 6,
    ResourceMessage_FieldNumber_MemTotal = 7,
    ResourceMessage_FieldNumber_MemUsed = 8,
    ResourceMessage_FieldNumber_NetworkIn = 9,
    ResourceMessage_FieldNumber_NetworkOut = 10,
    ResourceMessage_FieldNumber_DiskTotal = 11,
    ResourceMessage_FieldNumber_DiskUsed = 12,
    ResourceMessage_FieldNumber_Latency = 13,
    ResourceMessage_FieldNumber_BandWidth = 14,
};

/**
 * 클라이언트 리소스
 **/
@interface ResourceMessage : GPBMessage

/** 생성 시간 */
@property(nonatomic, readwrite) int64_t crtTimestamp;

/** 클라이언트 HOST OS명 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *hostOs;

/** 클라이언트 HOST OS 버전 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *hostOsVersion;

/** 클라이언트 버전 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *clientVersion;

/** CPU 사용율(%) */
@property(nonatomic, readwrite) int32_t cpuUsage;

/** CPU 명 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *cpuType;

/** Memory 토탈(MB) */
@property(nonatomic, readwrite) int32_t memTotal;

/** Memory 사용량(MB) */
@property(nonatomic, readwrite) int32_t memUsed;

/** Network In(KB) */
@property(nonatomic, readwrite) int32_t networkIn;

/** Network Out(KB) */
@property(nonatomic, readwrite) int32_t networkOut;

/** Disk 토탈(MB) */
@property(nonatomic, readwrite) int32_t diskTotal;

/** Disk 사용량(MB) */
@property(nonatomic, readwrite) int32_t diskUsed;

/** Viewer 지연시간(MS) */
@property(nonatomic, readwrite) int32_t latency;

/** Viewer 대역폭(BPS) */
@property(nonatomic, readwrite) int32_t bandWidth;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
